/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-vtools",
factory: function (require) {
"use strict";var plugin=(()=>{var x=Object.create;var m=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var I=Object.getOwnPropertyNames;var T=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty;var y=(e=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(e,{get:(r,o)=>(typeof require<"u"?require:r)[o]}):e)(function(e){if(typeof require<"u")return require.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')});var M=(e,r)=>{for(var o in r)m(e,o,{get:r[o],enumerable:!0})},H=(e,r,o,g)=>{if(r&&typeof r=="object"||typeof r=="function")for(let i of I(r))!E.call(e,i)&&i!==o&&m(e,i,{get:()=>r[i],enumerable:!(g=b(r,i))||g.enumerable});return e};var _=(e,r,o)=>(o=e!=null?x(T(e)):{},H(r||!e||!e.__esModule?m(o,"default",{value:e,enumerable:!0}):o,e)),Y=e=>H(m({},"__esModule",{value:!0}),e);var F={};M(F,{default:()=>V});var h=_(y("fs")),u=_(y("path")),D=y("@yarnpkg/core"),O=y("module"),C,v=new Map,w={hooks:{registerPackageExtensions:async(e,r)=>{C=G(e);let o=new Map;for(let s of C){let c=function(n){return D.structUtils.parseDescriptor(`${n}@*`,!0).identHash},f=function(n,a){let t=Array.from(a.entries()).find(([p,d])=>d.identHash==n);return t==null?`[could not find name for ident-hash: ${n}]`:t[1].name};var g=c,i=f;if(!s)continue;s.omitPriorDeps_auto=s.omitPriorDeps_auto??!0,console.log(`Preparing overrides group "${s.name}"...`);for(let[n,a]of Object.entries(s.overrides_forSelf??[])){let{scope:t,name:p}=D.structUtils.parseDescriptor(n),d=v.get(t??"");d||(d={},v.set(t??"",d)),d[p]=a}for(let[n,a]of Object.entries(s.overrides_forDeps??[])){let t=D.structUtils.parseDescriptor(n,!0);r(t,a);let p=[...s.omitPriorDeps_auto?Object.keys(a.dependencies??{}).map(c):[],...s.omitPriorDeps_auto?Object.keys(a.peerDependencies??{}).map(c):[],...s.omitPriorDeps_manual?Object.keys(s.omitPriorDeps_manual).map(c):[]];o.set(t.identHash,p)}let j=e.normalizePackage;e.normalizePackage=function(n,...a){let t={...n};function p(l,P){let k=Array.from(l.entries()).filter(([N,S])=>!P.includes(S.identHash));return new Map(k)}if(o.has(n.identHash)){let l=o.get(n.identHash),P=new Map([...n.dependencies,...n.peerDependencies]);console.log("Omitting prior deps (so overrides will apply) for:",n.name,`
Deps to omit/override:`,l.map(k=>f(k,P)).join(",")),t.dependencies=p(n.dependencies,l),t.peerDependencies=p(n.peerDependencies,l)}return j.call(this,t,...a)}}},reduceDependency:async e=>{let o=v.get(e.scope??"")?.[e.name];return o?{...e,range:o}:e}}};function G(e){let r=e.projectCwd.replace(/\\/g,"/").replace("/C:/","C:/"),o=u.default.join(r,"package.json"),g=h.default.readFileSync(o).toString(),i=JSON.parse(g),c=[u.default.join(r,"YVTConfig.js"),u.default.join(r,"YVTConfig.cjs")].find(f=>h.default.existsSync(f));if(c)return console.log("Yarn-plugin-vtools starting. Config found at:",c),(0,O.createRequire)(r)(c).config.dependencyOverrideGroups;if(i.dependencyOverrideGroups!=null)return console.log("Yarn-plugin-vtools starting. Config found in:",o),i.dependencyOverrideGroups;if(h.default.existsSync(u.default.join(r,"YVTConfig.mjs")))throw Error("ES import/export syntax is not currently supported. Please create a YVTConfig.js or YVTConfig.cjs file instead of an .mjs file.");return console.log("Yarn-plugin-vtools could not find config info, in project folder:",r),[]}var V=w;return Y(F);})();
return plugin;
}
};
//# sourceMappingURL=data:application/json;base64,
